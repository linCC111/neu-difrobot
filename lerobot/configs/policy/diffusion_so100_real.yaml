# @package _global_

# Use `act_koch_real.yaml` to train on real-world datasets collected on Alexander Koch's robots.
# Compared to `act.yaml`, it contains 2 cameras (i.e. laptop, phone) instead of 1 camera (i.e. top).
# Also, `training.eval_freq` is set to -1. This config is used to evaluate checkpoints at a certain frequency of training steps.
# When it is set to -1, it deactivates evaluation. This is because real-world evaluation is done through our `control_robot.py` script.
# Look at the documentation in header of `control_robot.py` for more information on how to collect data , train and evaluate a policy.
#
# Example of usage for training:
# ```bash
# python lerobot/scripts/train.py \
#   policy=act_koch_real \
#   env=koch_real
# ```
hydra:
  run:
    dir: outputs/train/diffusion_so100_1 # todo
  job:
    name: default # todo

resume: false
device: cuda:0
use_amp: false
seed: 1000
dataset_repo_id: so-100_1
dataset_root: data/
video_backend: pyav

# override_dataset_stats:
#   observation.images.laptop:
#     # stats from imagenet, since we use a pretrained vision model
#     mean: [[[0.485]], [[0.456]], [[0.406]]]  # (c,1,1)
#     std: [[[0.229]], [[0.224]], [[0.225]]]  # (c,1,1)
  # observation.images.phone:
  #   # stats from imagenet, since we use a pretrained vision model
  #   mean: [[[0.485]], [[0.456]], [[0.406]]]  # (c,1,1)
  #   std: [[[0.229]], [[0.224]], [[0.225]]]  # (c,1,1)

wandb:
  enable: false
  # Set to true to disable saving an artifact despite save_checkpoint == True
  disable_artifact: true
  project: aloha
  notes: ""
  log_video: false

fps: 50
env:
  name: so100
  task: so100
  state_dim: 6
  action_dim: 6
  fps: ${fps}
  episode_length: 400
  gym:
    obs_type: pixels_agent_pos
    render_mode: rgb_array

training:
  offline_steps: 200000
  online_steps: 0
  eval_freq: -1
  save_freq: 10000
  log_freq: 250
  save_checkpoint: true
  num_workers: 4

  batch_size: 8                                    
  grad_clip_norm: 10
  lr: 1.0e-4
  lr_scheduler: cosine
  lr_warmup_steps: 500
  adam_betas: [0.95, 0.999]
  adam_eps: 1.0e-8
  adam_weight_decay: 1.0e-6
  online_steps_between_rollouts: 1

  delta_timestamps:
    observation.images.laptop: "[i / ${fps} for i in range(1 - ${policy.n_obs_steps}, 1)]"
    observation.state: "[i / ${fps} for i in range(1 - ${policy.n_obs_steps}, 1)]"
    action: "[i / ${fps} for i in range(1 - ${policy.n_obs_steps}, 1 - ${policy.n_obs_steps} + ${policy.horizon})]"
  
  image_transforms:
    enable: false
    # This is the maximum number of transforms (sampled from these below) that will be applied to each frame.
    # It's an integer in the interval [1, number of available transforms].
    max_num_transforms: 3
    # By default, transforms are applied in Torchvision's suggested order (shown below).
    # Set this to True to apply them in a random order.
    random_order: false
    brightness:
      weight: 1
      min_max: [0.8, 1.2]
    contrast:
      weight: 1
      min_max: [0.8, 1.2]
    saturation:
      weight: 1
      min_max: [0.5, 1.5]
    hue:
      weight: 1
      min_max: [-0.05, 0.05]
    sharpness:
      weight: 1
      min_max: [0.8, 1.2]

eval:
  n_episodes: 50
  batch_size: 10

# See `configuration_act.py` for more details.
policy:
  name: transformer_diffusion

  # Input / output structure.
  n_obs_steps: 2
  horizon: 128   
  n_action_steps: 100

  input_shapes:
    # TODO(rcadene, alexander-soare): add variables for height and width from the dataset/env?
    observation.images.laptop: [3, 480, 640]
    observation.state: ["${env.state_dim}"]
  output_shapes:
    action: ["${env.action_dim}"]

  # Normalization / Unnormalization
  input_normalization_modes:
    observation.images.laptop: mean_std
    observation.state: min_max
  output_normalization_modes:
    action: min_max

  # Architecture / modeling.
  # Vision backbone.
  vision_backbone: resnet18
  crop_shape: [440, 560]
  crop_is_random: True
  pretrained_backbone_weights: null
  use_group_norm: True
  use_spatial_softmax: True
  spatial_softmax_num_keypoints: 32
  # Transformer.
  n_heads: 4
  n_layers: 8
  n_emb: 256
  causal_attn: True
  # Noise scheduler.
  num_train_timesteps: 100
  beta_schedule: squaredcos_cap_v2
  beta_start: 0.0001
  beta_end: 0.02
  prediction_type: epsilon # epsilon / sample
  clip_sample: True
  clip_sample_range: 1.0

  # Inference
  num_inference_steps: 100

  # Loss computation
  do_mask_loss_for_padding: false
